<?php

namespace Application\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-08 at 21:09:28.
 */
class UserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Application\Entity\User::getId
     */
    public function testGetId()
    {
        $id = 1;
        $this->assertNull($this->object->getId());
        $this->object->setId($id);
        $this->assertEquals($id, $this->object->getId());
    }

    /**
     * @covers Application\Entity\User::setId
     */
    public function testSetId()
    {
        $this->assertEquals($this->object, $this->object->setId(1));
    }

    /**
     * @covers Application\Entity\User::getUsername
     */
    public function testGetUsername()
    {
        $username = 'gebruikersnaam';
        $this->assertNull($this->object->getUsername());
        $this->object->setUsername($username);
        $this->assertEquals($username, $this->object->getUsername());
    }

    /**
     * @covers Application\Entity\User::setUsername
     */
    public function testSetUsername()
    {
        $this->assertEquals($this->object, $this->object->setUsername('inlognaam'));
    }

    /**
     * @covers Application\Entity\User::getEmail
     */
    public function testGetEmail()
    {
        $email = 'email@example.com';
        $this->assertNull($this->object->getEmail());
        $this->object->setEmail($email);
        $this->assertEquals($email, $this->object->getEmail());
    }

    /**
     * @covers Application\Entity\User::setEmail
     */
    public function testSetEmail()
    {
        $this->assertEquals($this->object, $this->object->setEmail('email@domain.tld'));
    }

    /**
     * @covers Application\Entity\User::getDisplayName
     */
    public function testGetDisplayName()
    {
        $displayname = 'Naam';
        $this->assertNull($this->object->getDisplayName());
        $this->object->setDisplayName($displayname);
        $this->assertEquals($displayname, $this->object->getDisplayName());
    }

    /**
     * @covers Application\Entity\User::setDisplayName
     */
    public function testSetDisplayName()
    {
        $this->assertEquals($this->object, $this->object->setDisplayName('weergavenaam'));
    }

    /**
     * @covers Application\Entity\User::getPassword
     */
    public function testGetPassword()
    {
        $password = 'CorrectHorseBatteryStaple';
        $this->assertNull($this->object->getPassword());
        $this->object->setPassword($password);
        $this->assertEquals($password, $this->object->getPassword());
    }

    /**
     * @covers Application\Entity\User::setPassword
     */
    public function testSetPassword()
    {
        $this->assertEquals($this->object, $this->object->setPassword('wachtwoord'));
    }

    /**
     * @covers Application\Entity\User::getState
     */
    public function testGetState()
    {
        $state = 'status';
        $this->assertNull($this->object->getState());
        $this->object->setState($state);
        $this->assertEquals($state, $this->object->getState());
    }

    /**
     * @covers Application\Entity\User::setState
     */
    public function testSetState()
    {
        $this->assertEquals($this->object, $this->object->setState('status'));
    }

    /**
     * @covers Application\Entity\User::getCreatedAt
     */
    public function testGetCreatedAt()
    {
        $this->assertNull($this->object->getCreatedAt());
    }

    /**
     * @covers Application\Entity\User::getUpdatedAt
     */
    public function testGetUpdatedAt()
    {
        $this->assertNull($this->object->getUpdatedAt());
    }

    /**
     * @covers Application\Entity\User::prePersist
     */
    public function testPrePersist()
    {
        $this->assertNull($this->object->getCreatedAt());
        $this->object->prePersist();
        $this->assertInstanceOf('DateTime', $this->object->getCreatedAt());
    }

    /**
     * @covers Application\Entity\User::preUpdate
     */
    public function testPreUpdate()
    {
        $this->assertNull($this->object->getUpdatedAt());
        $this->object->preUpdate();
        $this->assertInstanceOf('DateTime', $this->object->getUpdatedAt());
    }

}
