<?php

namespace Application\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-08 at 20:53:07.
 */
class PowermeasurementTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Powermeasurement
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Powermeasurement;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Application\Entity\Powermeasurement::getId
     */
    public function testGetId()
    {
        $id = 1;
        $this->assertNull($this->object->getId());
        $this->object->setId($id);
        $this->assertEquals($id, $this->object->getId());
    }

    /**
     * @covers Application\Entity\Powermeasurement::setId
     */
    public function testSetId()
    {
        $this->assertEquals($this->object, $this->object->setId(1));
    }

    /**
     * @covers Application\Entity\Powermeasurement::getObject
     */
    public function testGetObject()
    {
        $objectOwnership = new \Application\Entity\Objectownership;
        $this->assertNull($this->object->getObject());
        $this->object->setObject($objectOwnership);
        $this->assertEquals($objectOwnership, $this->object->getObject());
    }

    /**
     * @covers Application\Entity\Powermeasurement::setObject
     */
    public function testSetObject()
    {
        $this->assertEquals($this->object, $this->object->setObject(new \Application\Entity\Objectownership));
    }

    /**
     * @covers Application\Entity\Powermeasurement::getValue
     */
    public function testGetValue()
    {
        $value = 5434;
        $this->assertNull($this->object->getValue());
        $this->object->setValue($value);
        $this->assertEquals($value, $this->object->getValue());
    }

    /**
     * @covers Application\Entity\Powermeasurement::setValue
     */
    public function testSetValue()
    {
        $this->assertEquals($this->object, $this->object->setValue(654));
    }

    /**
     * @covers Application\Entity\Powermeasurement::setDate
     * @todo   Implement testSetDate().
     */
    public function testSetDate()
    {
        $this->assertEquals($this->object, $this->object->setDate(new \DateTime('now')));
    }

    /**
     * @covers Application\Entity\Powermeasurement::getDate
     * @todo   Implement testGetDate().
     */
    public function testGetDate()
    {
        $date = new \DateTime('now');
        $this->assertNull($this->object->getDate());
        $this->object->setDate($date);
        $this->assertEquals($date, $this->object->getDate());
    }

    /**
     * @covers Application\Entity\Powermeasurement::populate
     */
    public function testPopulate()
    {
        $data = array(
            'date' => '2013-01-12 00:00:00',
            'value' => 123,
        );
        $this->object->populate($data);

        $this->assertEquals(new \DateTime($data['date']), $this->object->getDate());
        $this->assertEquals($data['value'], $this->object->getValue());
    }

    /**
     * @covers Application\Entity\Powermeasurement::getArrayCopy
     */
    public function testGetArrayCopy()
    {
        $id = 123;
        $this->object->setId($id);

        $data = $this->object->getArrayCopy();
        $this->assertEquals($data['id'], $id);
    }

    /**
     * @covers Application\Entity\Powermeasurement::setInputFilter
     */
    public function testSetInputFilter()
    {
        $this->setExpectedException('Exception');
        $inputFilter = new \Zend\InputFilter\InputFilter;
        $this->object->setInputFilter($inputFilter);
    }

    /**
     * @covers Application\Entity\Powermeasurement::getInputFilter
     */
    public function testGetInputFilter()
    {
        $this->assertInstanceOf('Zend\InputFilter\InputFilter', $this->object->getInputFilter());
    }

}
